var epsg4326 = new OpenLayers.Projection("EPSG:4326");
var map;
var markers;
var vectors;
var wfs;
var pointWfs;
var popup;
var selectControl;
var units;

// START OF FUNCTION FOR TRIP CALULATIONS
function Units(toangles, fromangles, tolength, fromlength) {
  this.toAngles = toangles;
  this.fromAngles = fromangles;
  this.toLength = tolength;
  this.fromLength = fromlength;
}
//END OF TRIP CALCULATIONS

// START FUNCTIONS FOR THE INFO POPUPS
function onPopupClose(evt) {
    selectControl.unselect(selectedFeature);
}
function buildTable(attrs) {
  head = "<table>";
  tail = "</table>";
  cont = "";
  for (key in attrs) {
    if (attrs[key] != null){
      cont = cont + "<tr><td>" + key.toString() + "</td><td>" + attrs[key].toString() + "</td></tr>";
    }
  }
  return (head + cont + tail);
}
function onFeatureSelect(feature) {
    selectedFeature = feature;
    popup = new OpenLayers.Popup.FramedCloud("chicken", 
                             feature.geometry.getBounds().getCenterLonLat(),
                             null,
                             "<div style='font-size:.8em'>Attrs: " + buildTable(feature.attributes) + "</div>",
                             null, true, onPopupClose);
    feature.popup = popup;
    map.addPopup(popup);
}
function onFeatureUnselect(feature) {
    map.removePopup(feature.popup);
    feature.popup.destroy();
    feature.popup = null;
}
// END FUNCTIONS FOR THE INFO POPUPS

function initSlick() {
    units = new Units(function(t) {
                        return t * 180 / Math.PI;
                      },
                      function(t) {
                        return t * Math.PI / 180;
                      },
                      function(l) {
                        return l;
                      },
                      function(l) {
                        return l;
                      });
    //start SlickGrid
    var columns = [
      {id:"number", name:"#", field:"number"},
      {id:"name", name:"name", field:"name", editor:TextCellEditor},
      //{id:"lonlat", name:"lonlat", field:"lonlat0"},
      {id:"hdg", name:"HDG", field:"headingGrid"},
      {id:"dst", name:"DST", field:"distanceGrid"},
      {id:"height", name:"HGT", field:"heightGrid", editor:IntegerCellEditor},
      {id:"magvar", name:"MAG", field:"magvarGrid"},
      {id:"indicatedAirspeed", name:"IAS", field:"indicatedAirspeedGrid", editor:IntegerCellEditor},
      {id:"windDirection", name:"wind dir", field:"windDirectionGrid", editor:IntegerCellEditor},
      {id:"windSpeed", name:"wind speed", field:"windSpeedGrid", editor:IntegerCellEditor},
      {id:"trueAirspeed", name:"TAS", field:"trueAirspeedGrid"},
      {id:"groundSpeed", name:"GS", field:"groundSpeedGrid"},
      {id:"trueHeading", name:"TH", field:"trueHeadingGrid"},
    ];
    var options = {enableCellNavigation: true, enableColumnReorder: false, editable: true};
    grid = new Slick.Grid("#ops_plan", [], columns, options);
    //$("ops_plan").show();
}

function update_table(e) {
  //report(e);
  update_magvar(e.feature);
  gen_ops_plan2(e.feature);
}

function update_magvar(route) {
  vertexes = [];
  for (var key=0; key < route.geometry.components.length; key ++) {
    tmp = route.geometry.components[key];
    vertexes.push({"lat":tmp.x, "lon":tmp.y, "height":100});
  }
  new Ajax.Request('/cgi-bin/magvar.cgi', {
    method: "post",
    parameters: {"json": JSON.stringify(vertexes)},
    onSuccess: function(response) {
      for (var i=0; i < route.geometry.components.length; i++) {
        route.geometry.components[i].magvar = response.responseJSON[i].toRad();
      }
      grid.setData(route.geometry.components);
      grid.render();},
    });

  //$.post("/cgi-bin/magvar.cgi", {"json": JSON.stringify(vertexes)}, function(data){
  //  for (var i=0; i < route.geometry.components.length; i++) {
  //    route.geometry.components[i].magvar = data[i].toRad();
  //  }
  //  grid.setData(route.geometry.components);
  //  grid.render();
  //});
}

function pointToLonLat(point){
  if (point==undefined){
    return undefined;
  }
  var lonlat = new OpenLayers.LonLat(point.x, point.y);
  return lonlat;
}

var radius = 6371;
//legger til heading og distance pÃ¥ hvert punkt i en feature
//Vi tar ikke med det siste punktets avstand og retning siden det ikke gir noen mening
function calculate(components){
  var i=0;
  while (i < components.length - 1){
    components[i].number = i;
    components[i].indicatedAirspeed = units.fromLength(components[i].indicatedAirspeedGrid);
    components[i].windDirection = units.fromAngles(components[i].windDirectionGrid);
    components[i].windSpeed = units.fromLength(components[i].windSpeedGrid);
    components[i].magvarGrid = units.toAngles(components[i].magvar);

    components[i].trueAirspeed = components[i].indicatedAirspeed;
    components[i].trueAirspeedGrid = components[i].indicatedAirspeed;

    components[i].lonlat0 = pointToLonLat(components[i]);
    components[i].lonlat0Grid = components[i].lonlat0;

    components[i].lonlat1 = pointToLonLat(components[i+1]);
    components[i].lonlat1Grid = components[i].lonlat1;

    out = crsdist(components[i].lonlat0.lat.toRad(), components[i].lonlat0.lon.toRad(), components[i].lonlat1.lat.toRad(), components[i].lonlat1.lon.toRad()); 
    components[i].heading = out.crs12;
    components[i].headingGrid = units.toAngles(components[i].heading);

    components[i].distance = out.d * radius;
    components[i].distanceGrid = units.toLength(components[i].distance);

    var wind = calcWind(components[i].windSpeed, components[i].windDirection, components[i].trueAirspeed, components[i].heading);
    components[i].trueHeading = wind.crs;
    components[i].trueHeadingGrid = units.toAngles(components[i].trueHeading);

    components[i].groundSpeed = wind.gs;
    components[i].groundSpeedGrid = units.toLength(components[i].groundSpeed);
    i++;
  }

  //last one
  components[i].number = i;

  return components;
}

function gen_ops_plan2(route){
  route.geometry.components = calculate(route.geometry.components);
  grid.setData(route.geometry.components);
  grid.render();
}


function createMap(divName, options) {
    initSlick();
    OpenLayers.ProxyHost = "/cgi-bin/proxy.cgi?url=";
    map = new OpenLayers.Map('map');
    var topo2 = new OpenLayers.Layer.WMS(
		"Topografisk norgeskart2","http://opencache.statkart.no/gatekeeper/gk/gk.open?",
		{layers: 'kartdata2', format: 'image/jpeg',
		projection: "EPSG:4326"});
    map.addLayer(topo2);

    var wms = new OpenLayers.Layer.WMS( "OpenLayers WMS", 
	"http://vmap0.tiles.osgeo.org/wms/vmap0?", {layers: 'basic'}); 
    map.addLayer(wms);

    //START OF THE DRAWING LAYER
    vectors = new OpenLayers.Layer.Vector("Drawing Layer");
    map.addLayer(vectors);

    if (console && console.log) {
	vectors.events.on({
	    "beforefeaturemodified": null,
	    "featuremodified": update_table,
	    "afterfeaturemodified": null,
	    "vertexmodified": null,
	    "sketchmodified": null,
	    "sketchstarted": null,
	    "sketchcomplete": update_table,
	});
    }
    //END OF THE DRAWING LAYER
    //START OF WFS OAM DATA LAYER

    var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
    renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;

    var airspaceContext = {
        getFillColor: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "blue";
            }
        },
        getFillOpacity: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "0.2";
            }
        },
        getStrokeColor: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "blue"
            }
        },
        getStrokeOpacity: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "0.2";
            }
        },
    };
    var airspaceTemplate = {fillColor: "${getFillColor}",
                    strokeColor: "${getStrokeColor}",
                    fillOpacity: "${getFillOpacity}",
                    strokeOpacity: "${getStrokeOpacity}"};
    var airspaceStyle = new OpenLayers.Style(airspaceTemplate, {context:airspaceContext});

    wfs = new OpenLayers.Layer.Vector("Geoserver WFS", {
        strategies: [new OpenLayers.Strategy.BBOX()],
        protocol: new OpenLayers.Protocol.WFS({
            url: "http://openaviationmap.org:8080/geoserver/wfs",
            featureType: "planet_osm_polygon",
            featureNS: "http://openaviationmap.org",
            geometryName: "way",
            srsName: "EPS900913",
	    // the reason for json is that firefox does not parse xml with colons
	    outputFormat: "json",
	    readFormat: new OpenLayers.Format.GeoJSON(),
        }),
        styleMap: new OpenLayers.StyleMap(airspaceStyle),
        projection: "EPSG:900913",
        renderers: renderer,
    });
    map.addLayer(wfs);

    var pointContext = {
        getGraphic: function(feature) {
            if (feature.attributes["navaid"] == "yes"){
              return "/icons/vor.svg";
            }
            if (feature.attributes["aerodrome"] == "yes"){
              return "/icons/aerodrome.png";
            }
            else {
              return null;
            }
        },
    };
    var pointTemplate = {pointRadius:15, externalGraphic: "${getGraphic}"};

    var pointStyle = new OpenLayers.Style(pointTemplate, {context:pointContext});

    pointWfs = new OpenLayers.Layer.Vector("Geoserver pointWfs", {
        strategies: [new OpenLayers.Strategy.BBOX()],
        protocol: new OpenLayers.Protocol.WFS({
            url: "http://openaviationmap.org:8080/geoserver/wfs",
            featureType: "planet_osm_point",
            featureNS: "http://openaviationmap.org",
            geometryName: "way",
            srsName: "EPS900913",
	    // the reason for json is that firefox does not parse xml with colons
	    outputFormat: "json",
	    readFormat: new OpenLayers.Format.GeoJSON(),
        }),
        styleMap: new OpenLayers.StyleMap(pointStyle),
        projection: "EPSG:900913",
        renderers: renderer,
    });
    map.addLayer(pointWfs);
    //END OF WFS OAM DATA LAYER

    //START OF SELECT FEATURE THINGY
    var move = new OpenLayers.Control.DragPan();
    var draw = new OpenLayers.Control.DrawFeature(vectors,OpenLayers.Handler.Path);
    var modify = new OpenLayers.Control.ModifyFeature(vectors);
    var remove = new DeleteFeature(vectors);
    selectControl = new OpenLayers.Control.SelectFeature([wfs, pointWfs],
            {onSelect: onFeatureSelect, onUnselect: onFeatureUnselect});

    var panel = new OpenLayers.Control.Panel({defaultControl: move});
    panel.addControls([move, draw, modify, remove, selectControl]);
    map.addControl(panel);

    //END OF SELECT FEATURE THINGY

    map.addControl(new OpenLayers.Control.LayerSwitcher());
    map.addControl(new OpenLayers.Control.MousePosition());
    map.addControl(new OpenLayers.Control.PanZoom());
    map.addControl(new OpenLayers.Control.PanZoomBar());
    return map;
}

//Control for Ã¥ slette en feature.
DeleteFeature = OpenLayers.Class(OpenLayers.Control, {
    initialize: function(layer, options) {
        OpenLayers.Control.prototype.initialize.apply(this, [options]);
        this.layer = layer;
        this.handler = new OpenLayers.Handler.Feature(
            this, layer, {click: this.clickFeature}
        );
    },
    clickFeature: function(feature) {
        // if feature doesn't have a fid, destroy it
        if(feature.fid == undefined) {
            this.layer.destroyFeatures([feature]);
        } else {
            feature.state = OpenLayers.State.DELETE;
            this.layer.events.triggerEvent("afterfeaturemodified", {feature: feature});
            feature.renderIntent = "select";
            this.layer.drawFeature(feature);
        }
    },
    setMap: function(map) {
        this.handler.setMap(map);
        OpenLayers.Control.prototype.setMap.apply(this, arguments);
    },
    CLASS_NAME: "OpenLayers.Control.DeleteFeature"
});

function getArrowIcon() {
   var size = new OpenLayers.Size(25, 22);
   var offset = new OpenLayers.Pixel(-30, -27);
   var icon = new OpenLayers.Icon("<%= asset_path 'arrow.png' %>", size, offset);

   return icon;
}

function addMarkerToMap(position, icon, description) {
   var marker = new OpenLayers.Marker(position.clone().transform(epsg4326, map.getProjectionObject()), icon);

   markers.addMarker(marker);

   if (description) {
      marker.events.register("mouseover", marker, function() { openMapPopup(marker, description) });
   }

   return marker;
}

function addObjectToMap(url, zoom, callback) {
   var layer = new OpenLayers.Layer.GML("Objects", url, {
      format: OpenLayers.Format.OSM,
      style: {
          strokeColor: "blue",
          strokeWidth: 3,
          strokeOpacity: 0.5,
          fillOpacity: 0.2,
          fillColor: "lightblue",
          pointRadius: 6
      },
      projection: new OpenLayers.Projection("EPSG:4326"),
      displayInLayerSwitcher: false
   });

   layer.events.register("loadend", layer, function() {
      var extent;

      if (this.features.length) {
         extent = this.features[0].geometry.getBounds();

         for (var i = 1; i < this.features.length; i++) {
            extent.extend(this.features[i].geometry.getBounds());
         }

         if (zoom) {
            if (extent) {
               this.map.zoomToExtent(extent);
            } else {
               this.map.zoomToMaxExtent();
            }
         }
      }

      if (callback) {
         callback(extent);
      }
   });

   map.addLayer(layer);

   layer.loadGML();
}

function addBoxToMap(boxbounds, id, outline) {
   if (!vectors) {
     // Be aware that IE requires Vector layers be initialised on page load, and not under deferred script conditions
     vectors = new OpenLayers.Layer.Vector("Boxes", {
        displayInLayerSwitcher: false
     });
     map.addLayer(vectors);
   }
   var geometry;
   if (outline) {
     vertices = boxbounds.toGeometry().getVertices();
     vertices.push(new OpenLayers.Geometry.Point(vertices[0].x, vertices[0].y));
     geometry = new OpenLayers.Geometry.LineString(vertices).transform(epsg4326, map.getProjectionObject());
   } else {
     geometry = boxbounds.toGeometry().transform(epsg4326, map.getProjectionObject());
   }
   var box = new OpenLayers.Feature.Vector(geometry, {}, {
      strokeWidth: 2,
      strokeColor: '#ee9900',
      fillOpacity: 0
   });
   box.fid = id;

   vectors.addFeatures(box);

   return box;
}

function openMapPopup(marker, description) {
   closeMapPopup();

   popup = new OpenLayers.Popup.FramedCloud("popup", marker.lonlat, null,
                                            description, marker.icon, true);
   popup.setBackgroundColor("#E3FFC5");
   map.addPopup(popup);

   return popup;
}

function closeMapPopup() {
   if (popup) {
      map.removePopup(popup);
      delete popup;
   }
}

function removeMarkerFromMap(marker){
   markers.removeMarker(marker);
}

function removeBoxFromMap(box){
   vectors.removeFeature(box);
}

function getMapCenter() {
   return map.getCenter().clone().transform(map.getProjectionObject(), epsg4326);
}

function setMapCenter(center, zoom) {
   zoom = parseInt(zoom);
   var numzoom = map.getNumZoomLevels();
   if (zoom >= numzoom) zoom = numzoom - 1;
   map.setCenter(center.clone().transform(epsg4326, map.getProjectionObject()), zoom);
}

function setMapExtent(extent) {
   map.zoomToExtent(extent.clone().transform(epsg4326, map.getProjectionObject()));
}

function getMapExtent() {
   return map.getExtent().clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapZoom() {
   return map.getZoom();
}

function getEventPosition(event) {
   return map.getLonLatFromViewPortPx(event.xy).clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapLayers() {
   var layerConfig = "";

   for (var i = 0; i < map.layers.length; i++) {
      if (map.layers[i].layerCode && map.layers[i].getVisibility()) {
         layerConfig += map.layers[i].layerCode;
      }
   }

   return layerConfig;
}

function setMapLayers(layerConfig) {
   if (layerConfig.charAt(0) == "B" || layerConfig.charAt(0) == "0") {
      var l = 0;

      for (var layers = map.getLayersBy("isBaseLayer", true), i = 0; i < layers.length; i++) {
         var c = layerConfig.charAt(l++);

         if (c == "B") {
            map.setBaseLayer(layers[i]);
         } else {
            map.layers[i].setVisibility(false);
         }
      }
   } else {
      for (var i = 0; i < map.layers.length; i++) {
         if (map.layers[i].layerCode) {
            if (layerConfig.indexOf(map.layers[i].layerCode) >= 0) {
               if (map.layers[i].isBaseLayer) {
                  map.setBaseLayer(map.layers[i]);
               } else {
                  map.layers[i].setVisibility(true);
               }
            } else if (!map.layers[i].isBaseLayer) {
               map.layers[i].setVisibility(false);
            }
         }
      }
   }
}

function scaleToZoom(scale) {
   return Math.log(360.0/(scale * 512.0)) / Math.log(2.0);
}
