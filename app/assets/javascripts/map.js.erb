var epsg4326 = new OpenLayers.Projection("EPSG:4326");
var map;
var markers;
var popup;

function pointToLonLat(point){
  if (point==undefined){
    return undefined;
  }
  var lonlat = new OpenLayers.LonLat(point.x, point.y);
  return lonlat;
}

function escapeHTML(str)
{
  var div = document.createElement('div');
  div.innerHTML = str;
  return div.firstChild.nodeValue;
}

function buildView(obj){
  pre = "<table>";
  post = "</table>";
  text = "";
  for (var j=0; j+2<obj.length; j += 2){
    //object tags
	  text = text + '<tr><td colspan="2"><b><center>Object ' + (j/2) + '</center></b></td></tr>';
	  text = text + '<tr><td colspan="2"><b><center>Feature tags:</center></b></td></tr>';
    keyVals = obj[j].slice(1,-1).split('", "');
    for (var i=0; i<keyVals.length; i++) {
      var kv = keyVals[i].split('"=>"');
      text = text + "<tr><td>" + kv[0] + "</td><td>" + kv[1] + "</td></tr>";
    }
    //relations
    text = text + '<tr><td colspan="2"><b><center>Relation tags:</b></center></td></tr>';
    keyVals = obj[j+1].slice(1,-1).split('", "');
    for (var i=0; i<keyVals.length; i++) {
      var kv = keyVals[i].split('"=>"');
      text = text + "<tr><td>" + kv[0] + "</td><td>" + kv[1] + "</td></tr>";
    }
    text = text + '<tr><td colspan="2"></td></tr>';
  }
  return pre + text + post;
}

function createMap(divName, options) {
    OpenLayers.ProxyHost = "/cgi-bin/proxy.cgi?url=";
    map = new OpenLayers.Map('map');

    //THIS IS THE NEW WMS TEST MAP
    var lys_wms = new OpenLayers.Layer.WMS( "OAM WMS", 
                    //"http://openaviationmap.org/cgi-bin/mapserv?map=../mapserv/wms_dev.map&",
                    'http://openaviationmap.org/cgi-bin/tilecache/tilecache.cgi?',
		    {layers: ['oam-area','oam-line','oam-point'], format: 'image/png', transparent: true}); 
    map.addLayer(lys_wms);

        // THIS IS THE NEW INFO THINGY
        info = new OpenLayers.Control.WMSGetFeatureInfo({
            title: 'Identify features by clicking',
            //url: 'http://openaviationmap.org/cgi-bin/mapserv?map=../mapserv/wms_dev.map&',
            url: 'http://openaviationmap.org/cgi-bin/mapserv?map=../mapserv/wms.map&',
            layerUrls: ['http://openaviationmap.org/cgi-bin/tilecache/tilecache.cgi?'],
            queryVisible: true,
            eventListeners: {
                getfeatureinfo: function(event) {
                    var resp = buildView(escapeHTML(event.text).split("\n"));
                    var pop = new OpenLayers.Popup.FramedCloud(
                        "chicken", 
                        map.getLonLatFromPixel(event.xy),
                        null,
                        resp,
                        null,
                        true
                    );
                    pop.maxSize = new OpenLayers.Size(600,400);
                    pop.autoSize = true;
                    map.addPopup(pop);
                }
            }
        });
        map.addControl(info);
        info.activate();

    var wms = new OpenLayers.Layer.WMS( "Europe, (Norwegian chart authority)",
	"http://opencache.statkart.no/gatekeeper/gk/gk.open?", {layers: 'europa'}); 
    map.addLayer(wms);

    var wms = new OpenLayers.Layer.WMS( "Norway-topo, (Norwegian chart authority)",
        "http://opencache.statkart.no/gatekeeper/gk/gk.open?", {layers: 'topo2'}); 
    map.addLayer(wms);

    var wms = new OpenLayers.Layer.WMS( "OpenLayers WMS", 
	"http://vmap0.tiles.osgeo.org/wms/vmap0?", {layers: 'basic'}); 
    map.addLayer(wms);

    map.addControl(new OpenLayers.Control.LayerSwitcher());
    map.addControl(new OpenLayers.Control.MousePosition());
    map.addControl(new OpenLayers.Control.PanZoom());
    map.addControl(new OpenLayers.Control.PanZoomBar());
    return map;
}

function getArrowIcon() {
   var size = new OpenLayers.Size(25, 22);
   var offset = new OpenLayers.Pixel(-30, -27);
   var icon = new OpenLayers.Icon("<%= asset_path 'arrow.png' %>", size, offset);

   return icon;
}

function addMarkerToMap(position, icon, description) {
   var marker = new OpenLayers.Marker(position.clone().transform(epsg4326, map.getProjectionObject()), icon);

   markers.addMarker(marker);

   if (description) {
      marker.events.register("mouseover", marker, function() { openMapPopup(marker, description) });
   }

   return marker;
}

function addObjectToMap(url, zoom, callback) {
   var layer = new OpenLayers.Layer.GML("Objects", url, {
      format: OpenLayers.Format.OSM,
      style: {
          strokeColor: "blue",
          strokeWidth: 3,
          strokeOpacity: 0.5,
          fillOpacity: 0.2,
          fillColor: "lightblue",
          pointRadius: 6
      },
      projection: new OpenLayers.Projection("EPSG:4326"),
      displayInLayerSwitcher: false
   });

   layer.events.register("loadend", layer, function() {
      var extent;

      if (this.features.length) {
         extent = this.features[0].geometry.getBounds();

         for (var i = 1; i < this.features.length; i++) {
            extent.extend(this.features[i].geometry.getBounds());
         }

         if (zoom) {
            if (extent) {
               this.map.zoomToExtent(extent);
            } else {
               this.map.zoomToMaxExtent();
            }
         }
      }

      if (callback) {
         callback(extent);
      }
   });

   map.addLayer(layer);

   layer.loadGML();
}

function addBoxToMap(boxbounds, id, outline) {
   if (!vectors) {
     // Be aware that IE requires Vector layers be initialised on page load, and not under deferred script conditions
     vectors = new OpenLayers.Layer.Vector("Boxes", {
        displayInLayerSwitcher: false
     });
     map.addLayer(vectors);
   }
   var geometry;
   if (outline) {
     vertices = boxbounds.toGeometry().getVertices();
     vertices.push(new OpenLayers.Geometry.Point(vertices[0].x, vertices[0].y));
     geometry = new OpenLayers.Geometry.LineString(vertices).transform(epsg4326, map.getProjectionObject());
   } else {
     geometry = boxbounds.toGeometry().transform(epsg4326, map.getProjectionObject());
   }
   var box = new OpenLayers.Feature.Vector(geometry, {}, {
      strokeWidth: 2,
      strokeColor: '#ee9900',
      fillOpacity: 0
   });
   box.fid = id;

   vectors.addFeatures(box);

   return box;
}

function openMapPopup(marker, description) {
   closeMapPopup();

   popup = new OpenLayers.Popup.FramedCloud("popup", marker.lonlat, null,
                                            description, marker.icon, true);
   popup.setBackgroundColor("#E3FFC5");
   map.addPopup(popup);

   return popup;
}

function closeMapPopup() {
   if (popup) {
      map.removePopup(popup);
      delete popup;
   }
}

function removeMarkerFromMap(marker){
   markers.removeMarker(marker);
}

function removeBoxFromMap(box){
   vectors.removeFeature(box);
}

function getMapCenter() {
   return map.getCenter().clone().transform(map.getProjectionObject(), epsg4326);
}

function setMapCenter(center, zoom) {
   zoom = parseInt(zoom);
   var numzoom = map.getNumZoomLevels();
   if (zoom >= numzoom) zoom = numzoom - 1;
   map.setCenter(center.clone().transform(epsg4326, map.getProjectionObject()), zoom);
}

function setMapExtent(extent) {
   map.zoomToExtent(extent.clone().transform(epsg4326, map.getProjectionObject()));
}

function getMapExtent() {
   return map.getExtent().clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapZoom() {
   return map.getZoom();
}

function getEventPosition(event) {
   return map.getLonLatFromViewPortPx(event.xy).clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapLayers() {
   var layerConfig = "";

   for (var i = 0; i < map.layers.length; i++) {
      if (map.layers[i].layerCode && map.layers[i].getVisibility()) {
         layerConfig += map.layers[i].layerCode;
      }
   }

   return layerConfig;
}

function setMapLayers(layerConfig) {
   if (layerConfig.charAt(0) == "B" || layerConfig.charAt(0) == "0") {
      var l = 0;

      for (var layers = map.getLayersBy("isBaseLayer", true), i = 0; i < layers.length; i++) {
         var c = layerConfig.charAt(l++);

         if (c == "B") {
            map.setBaseLayer(layers[i]);
         } else {
            map.layers[i].setVisibility(false);
         }
      }
   } else {
      for (var i = 0; i < map.layers.length; i++) {
         if (map.layers[i].layerCode) {
            if (layerConfig.indexOf(map.layers[i].layerCode) >= 0) {
               if (map.layers[i].isBaseLayer) {
                  map.setBaseLayer(map.layers[i]);
               } else {
                  map.layers[i].setVisibility(true);
               }
            } else if (!map.layers[i].isBaseLayer) {
               map.layers[i].setVisibility(false);
            }
         }
      }
   }
}

function scaleToZoom(scale) {
   return Math.log(360.0/(scale * 512.0)) / Math.log(2.0);
}
