var epsg4326 = new OpenLayers.Projection("EPSG:4326");
var map;
var markers;
var wfs;
var pointWfs;
var popup;
var selectControl;

// START FUNCTIONS FOR THE INFO POPUPS
function onPopupClose(evt) {
    selectControl.unselect(selectedFeature);
}
function buildTable(attrs) {
  head = '<table class="popuptable">';
  tail = "</table>";
  cont = "";
  for (key in attrs) {
    if (attrs[key] != null){
      cont = cont + "<tr><td>" + key.toString() + "</td><td>" + attrs[key].toString() + "</td></tr>";
    }
  }
  return (head + cont + tail);
}
function onFeatureSelect(feature) {
    selectedFeature = feature;
    popup = new OpenLayers.Popup.FramedCloud("chicken", 
                             feature.geometry.getBounds().getCenterLonLat(),
			     null,
                             "<div style='font-size:.8em; width: 300px'>Attrs: " + buildTable(feature.attributes) + "</div>",
                             null, true, onPopupClose);
    popup.maxSize = new OpenLayers.Size(400,300);
    popup.autoSize = true;
    feature.popup = popup;
    map.addPopup(popup);
}
function onFeatureUnselect(feature) {
    map.removePopup(feature.popup);
    feature.popup.destroy();
    feature.popup = null;
}
// END FUNCTIONS FOR THE INFO POPUPS


function pointToLonLat(point){
  if (point==undefined){
    return undefined;
  }
  var lonlat = new OpenLayers.LonLat(point.x, point.y);
  return lonlat;
}

function createMap(divName, options) {
    OpenLayers.ProxyHost = "/cgi-bin/proxy.cgi?url=";
    map = new OpenLayers.Map('map');
    var topo2 = new OpenLayers.Layer.WMS(
		"Topografisk norgeskart2","http://opencache.statkart.no/gatekeeper/gk/gk.open?",
		{layers: 'kartdata2', format: 'image/jpeg',
		projection: "EPSG:4326"});
    map.addLayer(topo2);

    var wms = new OpenLayers.Layer.WMS( "OpenLayers WMS", 
	"http://vmap0.tiles.osgeo.org/wms/vmap0?", {layers: 'basic'}); 
    map.addLayer(wms);

    //START OF WFS OAM DATA LAYER

    var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
    renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;

    var airspaceContext = {
        getFillColor: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "blue";
            }
        },
        getFillOpacity: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "0.2";
            }
        },
        getStrokeColor: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "blue"
            }
        },
        getStrokeOpacity: function(feature) {
            if (feature.attributes["airspace"] == "yes"){
              return "0.2";
            }
        },
    };
    var airspaceTemplate = {fillColor: "${getFillColor}",
                    strokeColor: "${getStrokeColor}",
                    fillOpacity: "${getFillOpacity}",
                    strokeOpacity: "${getStrokeOpacity}"};
    var airspaceStyle = new OpenLayers.Style(airspaceTemplate, {context:airspaceContext});

    wfs = new OpenLayers.Layer.Vector("Geoserver WFS", {
        strategies: [new OpenLayers.Strategy.BBOX()],
        protocol: new OpenLayers.Protocol.WFS({
            url: "http://openaviationmap.org:8080/geoserver/wfs",
            featureType: "planet_osm_polygon",
            featureNS: "http://openaviationmap.org",
            geometryName: "way",
            srsName: "EPS900913",
	    // the reason for json is that firefox does not parse xml with colons
	    outputFormat: "json",
	    readFormat: new OpenLayers.Format.GeoJSON(),
        }),
        styleMap: new OpenLayers.StyleMap(airspaceStyle),
        projection: "EPSG:900913",
        renderers: renderer,
    });
    map.addLayer(wfs);

    var pointContext = {
        getGraphic: function(feature) {
            if (feature.attributes["navaid"] == "yes"){
              return "/icons/vor.svg";
            }
            if (feature.attributes["aerodrome"] == "yes"){
              return "/icons/aerodrome.png";
            }
            else {
              return null;
            }
        },
    };
    var pointTemplate = {pointRadius:15, externalGraphic: "${getGraphic}"};

    var pointStyle = new OpenLayers.Style(pointTemplate, {context:pointContext});

    pointWfs = new OpenLayers.Layer.Vector("Geoserver pointWfs", {
        strategies: [new OpenLayers.Strategy.BBOX()],
        protocol: new OpenLayers.Protocol.WFS({
            url: "http://openaviationmap.org:8080/geoserver/wfs",
            featureType: "planet_osm_point",
            featureNS: "http://openaviationmap.org",
            geometryName: "way",
            srsName: "EPS900913",
	    // the reason for json is that firefox does not parse xml with colons
	    outputFormat: "json",
	    readFormat: new OpenLayers.Format.GeoJSON(),
        }),
        styleMap: new OpenLayers.StyleMap(pointStyle),
        projection: "EPSG:900913",
        renderers: renderer,
    });
    map.addLayer(pointWfs);
    //END OF WFS OAM DATA LAYER

    //START OF SELECT FEATURE THINGY
    selectControl = new OpenLayers.Control.SelectFeature([wfs, pointWfs],
            {onSelect: onFeatureSelect, onUnselect: onFeatureUnselect});

    var panel = new OpenLayers.Control.Panel({defaultControl: selectControl});
    panel.addControls([selectControl]);
    map.addControl(panel);

    //END OF SELECT FEATURE THINGY

    map.addControl(new OpenLayers.Control.LayerSwitcher());
    map.addControl(new OpenLayers.Control.MousePosition());
    map.addControl(new OpenLayers.Control.PanZoom());
    map.addControl(new OpenLayers.Control.PanZoomBar());
    return map;
}

function getArrowIcon() {
   var size = new OpenLayers.Size(25, 22);
   var offset = new OpenLayers.Pixel(-30, -27);
   var icon = new OpenLayers.Icon("<%= asset_path 'arrow.png' %>", size, offset);

   return icon;
}

function addMarkerToMap(position, icon, description) {
   var marker = new OpenLayers.Marker(position.clone().transform(epsg4326, map.getProjectionObject()), icon);

   markers.addMarker(marker);

   if (description) {
      marker.events.register("mouseover", marker, function() { openMapPopup(marker, description) });
   }

   return marker;
}

function addObjectToMap(url, zoom, callback) {
   var layer = new OpenLayers.Layer.GML("Objects", url, {
      format: OpenLayers.Format.OSM,
      style: {
          strokeColor: "blue",
          strokeWidth: 3,
          strokeOpacity: 0.5,
          fillOpacity: 0.2,
          fillColor: "lightblue",
          pointRadius: 6
      },
      projection: new OpenLayers.Projection("EPSG:4326"),
      displayInLayerSwitcher: false
   });

   layer.events.register("loadend", layer, function() {
      var extent;

      if (this.features.length) {
         extent = this.features[0].geometry.getBounds();

         for (var i = 1; i < this.features.length; i++) {
            extent.extend(this.features[i].geometry.getBounds());
         }

         if (zoom) {
            if (extent) {
               this.map.zoomToExtent(extent);
            } else {
               this.map.zoomToMaxExtent();
            }
         }
      }

      if (callback) {
         callback(extent);
      }
   });

   map.addLayer(layer);

   layer.loadGML();
}

function addBoxToMap(boxbounds, id, outline) {
   if (!vectors) {
     // Be aware that IE requires Vector layers be initialised on page load, and not under deferred script conditions
     vectors = new OpenLayers.Layer.Vector("Boxes", {
        displayInLayerSwitcher: false
     });
     map.addLayer(vectors);
   }
   var geometry;
   if (outline) {
     vertices = boxbounds.toGeometry().getVertices();
     vertices.push(new OpenLayers.Geometry.Point(vertices[0].x, vertices[0].y));
     geometry = new OpenLayers.Geometry.LineString(vertices).transform(epsg4326, map.getProjectionObject());
   } else {
     geometry = boxbounds.toGeometry().transform(epsg4326, map.getProjectionObject());
   }
   var box = new OpenLayers.Feature.Vector(geometry, {}, {
      strokeWidth: 2,
      strokeColor: '#ee9900',
      fillOpacity: 0
   });
   box.fid = id;

   vectors.addFeatures(box);

   return box;
}

function openMapPopup(marker, description) {
   closeMapPopup();

   popup = new OpenLayers.Popup.FramedCloud("popup", marker.lonlat, null,
                                            description, marker.icon, true);
   popup.setBackgroundColor("#E3FFC5");
   map.addPopup(popup);

   return popup;
}

function closeMapPopup() {
   if (popup) {
      map.removePopup(popup);
      delete popup;
   }
}

function removeMarkerFromMap(marker){
   markers.removeMarker(marker);
}

function removeBoxFromMap(box){
   vectors.removeFeature(box);
}

function getMapCenter() {
   return map.getCenter().clone().transform(map.getProjectionObject(), epsg4326);
}

function setMapCenter(center, zoom) {
   zoom = parseInt(zoom);
   var numzoom = map.getNumZoomLevels();
   if (zoom >= numzoom) zoom = numzoom - 1;
   map.setCenter(center.clone().transform(epsg4326, map.getProjectionObject()), zoom);
}

function setMapExtent(extent) {
   map.zoomToExtent(extent.clone().transform(epsg4326, map.getProjectionObject()));
}

function getMapExtent() {
   return map.getExtent().clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapZoom() {
   return map.getZoom();
}

function getEventPosition(event) {
   return map.getLonLatFromViewPortPx(event.xy).clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapLayers() {
   var layerConfig = "";

   for (var i = 0; i < map.layers.length; i++) {
      if (map.layers[i].layerCode && map.layers[i].getVisibility()) {
         layerConfig += map.layers[i].layerCode;
      }
   }

   return layerConfig;
}

function setMapLayers(layerConfig) {
   if (layerConfig.charAt(0) == "B" || layerConfig.charAt(0) == "0") {
      var l = 0;

      for (var layers = map.getLayersBy("isBaseLayer", true), i = 0; i < layers.length; i++) {
         var c = layerConfig.charAt(l++);

         if (c == "B") {
            map.setBaseLayer(layers[i]);
         } else {
            map.layers[i].setVisibility(false);
         }
      }
   } else {
      for (var i = 0; i < map.layers.length; i++) {
         if (map.layers[i].layerCode) {
            if (layerConfig.indexOf(map.layers[i].layerCode) >= 0) {
               if (map.layers[i].isBaseLayer) {
                  map.setBaseLayer(map.layers[i]);
               } else {
                  map.layers[i].setVisibility(true);
               }
            } else if (!map.layers[i].isBaseLayer) {
               map.layers[i].setVisibility(false);
            }
         }
      }
   }
}

function scaleToZoom(scale) {
   return Math.log(360.0/(scale * 512.0)) / Math.log(2.0);
}
